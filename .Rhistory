knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
fit <- mlogit(buy ~ years_since_purchase + consistencycategory, data = df_train)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(tidyverse)
df <- read_csv("cleandata.csv")
head(df)
df$buy <- 0
df$buy[df$targdol > 0] <- 1
table(df$buy)
#9.4% buy rate
sum(df$buy)/nrow(df)
library(mlogit)
df_train2 <- df_train[, c('buy', 'years_since_purchase', 'consistencycategory')]
library(mlogit)
install.packages('mlogit')
library(mlogit)
df_reshape <- mlogit.data(data = df, choice = "buy", shape = "wide")
df_train <- df_reshape[df_reshape$train == 1, ]
df_test <- df_reshape[df_reshape$train == 0, ]
df_train2 <- df_train[, c('buy', 'years_since_purchase', 'consistencycategory')]
fit <- mlogit(buy ~ years_since_purchase + consistencycategory, data = df_train2)
df_train2 <- df_train[, c('buy', 'years_since_purchase', 'consistencycategory', 'chid', 'alt')]
fit <- mlogit(buy ~ years_since_purchase + consistencycategory, data = df_train2)
df2 <- df[, c('buy', 'years_since_purchase', 'consistencycategory', 'chid', 'alt')]
df2 <- df[, c('buy', 'years_since_purchase', 'consistencycategory')]
df3 <- mlogit.data(data = df, choice = "buy", shape = "wide")
fit <- mlogit(buy ~ years_since_purchase + consistencycategory, data = df3)
View(df3)
df[, c('buy', 'years_since_purchase', 'consistencycategory')]
df3 <- mlogit.data(data = df2, choice = "buy", shape = "wide")
fit <- mlogit(buy ~ years_since_purchase + consistencycategory, data = df3)
df3
#change the targdol to 0:1
df$targdol[df$targdol!=0]=1
library(ROCR)
knitr::opts_chunk$set(echo = TRUE)
#9.4% buy rate
sum(df$buy)/nrow(df)
#logistic regression
model <- glm(targdol ~.,family=binomial(link='logit'),data=train)
train<-subset(train, select = -c(datead6,datelp6,lpuryear,train) )
head(train)
train$targdol<-as.factor(train$targdol)
train$recentseason<-as.factor(train$recentseason)
#choose the variables in test
test<-subset(test, select = -c(datead6,datelp6,lpuryear,train) )
head(test)
test$targdol<-as.factor(test$targdol)
test$recentseason<-as.factor(test$recentseason)
#logistic regression
model <- glm(targdol ~.,family=binomial(link='logit'),data=train)
summary(model)
train<-df[df$train==1,]
test<-df[df$train==0,]
train<-subset(train, select = -c(datead6,datelp6,lpuryear,train) )
head(train)
train$targdol<-as.factor(train$targdol)
train$recentseason<-as.factor(train$recentseason)
#choose the variables in test
test<-subset(test, select = -c(datead6,datelp6,lpuryear,train) )
head(test)
test$targdol<-as.factor(test$targdol)
test$recentseason<-as.factor(test$recentseason)
#logistic regression
model <- glm(targdol ~.,family=binomial(link='logit'),data=train)
summary(model)
# install.packages('mlogit')
# library(mlogit)
# df_reshape <- mlogit.data(data = df, choice = "buy", shape = "wide")
#
# df_train <- df_reshape[df_reshape$train == 1, ]
# df_test <- df_reshape[df_reshape$train == 0, ]
#
# df2 <- df[, c('buy', 'years_since_purchase', 'consistencycategory')]
# df3 <- mlogit.data(data = df2, choice = "buy", shape = "wide")
#
# #get names
# z <- NULL
# for (name in names(df_test)) {
#   z <- paste(z, name, "+")
# }
# z
#
# #X1 + targdol + datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + ordhist + falord + sprord + train + recentseason + recency_year + years_since_purchase + consistencycategory + buy + chid + alt
#
# fit <- mlogit(buy ~ years_since_purchase + consistencycategory, data = df3)
#
#
# #fit <- mlogit(buy ~  datelp6 + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + ordhist + falord + sprord + years_since_purchase + consistencycategory, data = df_train)
# summary(fit)
df_train <- df[df$train == 1, ]
df_test <- df[df$train == 0, ]
#get names
z <- NULL
for (name in names(df_test)) {
z <- paste(z, name, "+")
}
z
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + ordhist + falord + sprord + train + recentseason + recency_year + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + train + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
test_predict <- predict(fit, newdata = df_test)
test_predict
df <- read_csv("cleandata.csv")
library(tidyverse)
df <- read_csv("cleandata.csv")
head(df)
df$buy <- 0
df$buy[df$targdol > 0] <- 1
table(df$buy)
#9.4% buy rate
sum(df$buy)/nrow(df)
#split into test and train
df_train <- df[df$train == 1, ]
df_test <- df[df$train == 0, ]
#get names
z <- NULL
for (name in names(df_test)) {
z <- paste(z, name, "+")
}
z
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
summary(fit)
test_predict <- predict(fit, newdata = df_test)
test_predict
#pred = predict(mod_fit, newdata=testing)
confusionMatrix(data=pred, test$targdol)
test_predict <- predict(fit, newdata = df_test, type = "class")
test_predict <- predict(fit, newdata = df_test)
test_predict
df_test
test_predict[9]
df_test[9]
df_test[,9]
df_test[9,]
knitr::opts_chunk$set(echo = TRUE)
test_predict[9]
df_test[9,]
table(test_predict)
round(test_predict)
table(round(test_predict))
table(df_test$buy, round(test_predict))
table(df_test$buy, round(test_predict))
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
table(df_test$buy, test_predict)
tab <- table(df_test$buy, test_predict)
tab
sum(diag(tab))/sum(tab)
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
tab <- table(df_test$buy, test_predict dnn = c('true', 'predicted'))
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
fit2 <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2)
fit2 <- glm(buy ~ datead6 + datelp6 + lpuryear + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2)
test_predict <- predict(fit2, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
test_predict <- predict(fit, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
#split into test and train
df_train <- df[df$train == 1, ]
df_test <- df[df$train == 0, ]
# #get names
# z <- NULL
# for (name in names(df_test)) {
#   z <- paste(z, name, "+")
# }
# z
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
fit2 <- glm(buy ~ datelp6 + lpuryear + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2)
test_predict <- predict(fit2, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
# z
df_test$buy[test_predict == 1]
table(df$buy, useNA = "always")
table(df$buy, useNA = "ifany")
df_test$targdol[test_predict == 1]
View(df_test)
fit2 <- glm(buy ~ datead6 + datelp6 + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2)
test_predict <- predict(fit2, newdata = df_test)
#not sure if this is correct - set predict < 0 to 0, predict > 0 to 1
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
df_test$targdol[test_predict == 1]
test_predict <- predict(fit, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
table(df$lpuryear, df$days_since_last_purchase, useNA = "ifany")
table(df$lpuryear, df$years_since_purchase, useNA = "ifany")
z
table(df$lpuryear, df$recency_year, useNA = "ifany")
is.na(df$lpuryear)
df$recency_year[is.na(df$lpuryear) == TRUE]
df$lpuryear[is.na(df$lpuryear) == TRUE] <- df$recency_year[is.na(df$lpuryear) == TRUE]
table(df$lpuryear, df$recency_year, useNA = "ifany")
df$lpuryear[is.na(df$lpuryear) == TRUE] <- df$recency_year[is.na(df$lpuryear) == TRUE]
head(df)
df$buy <- 0
df$buy[df$targdol > 0] <- 1
table(df$buy, useNA = "ifany")
#9.4% buy rate
sum(df$buy)/nrow(df)
df_train <- df[df$train == 1, ]
df_test <- df[df$train == 0, ]
# #get names
# z <- NULL
# for (name in names(df_test)) {
#   z <- paste(z, name, "+")
# }
# z
fit <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit)
test_predict <- predict(fit, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
fit2 <- glm(buy ~ datead6 + datelp6 + lpuryear + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2)
test_predict <- predict(fit2, newdata = df_test)
#not sure if this is correct - set predict < 0 to 0, predict > 0 to 1
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
df_test$targdol[test_predict == 1]
test_predict <- predict(fit2, newdata = df_test)
#not sure if this is correct - set predict < 0 to 0, predict > 0 to 1
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
tab <- table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
tab
CCR <- sum(diag(tab))/sum(tab)
CCR
sum(df_test$targdol[test_predict == 1])
cat(CCR:, sum(diag(tab))/sum(tab))
cat('CCR:', sum(diag(tab))/sum(tab))
test_predict <- predict(fit2, newdata = df_test)
#not sure if this is correct - set predict < 0 to 0, predict > 0 to 1
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('Actual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict <- predict(fit2, newdata = df_test)
#not sure if this is correct - set predict < 0 to 0, predict > 0 to 1
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict <- predict(fit, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
cat('\nActual targdol of test buyers', sum(df_test$targdol))
table(df$consistencycategory)
df$consistencycategory <- relevel(factor(df$consistencycategory), 'Ref')
df_train <- df[df$train == 1, ]
df_test <- df[df$train == 0, ]
cat('\nActual targdol of test buyers', sum(df_test$targdol))
# #get names
# z <- NULL
# for (name in names(df_test)) {
#   z <- paste(z, name, "+")
# }
# z
fit_glm <- glm(buy ~ datead6 + datelp6 + lpuryear + slstyr + slslyr + sls2ago + sls3ago + slshist + ordtyr + ordlyr + ord2ago + ord3ago + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit_glm)
test_predict <- predict(fit_glm, newdata = df_test)
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
fit2_glm <- glm(buy ~ datead6 + datelp6 + lpuryear + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2_glm)
test_predict <- predict(fit2_glm, newdata = df_test)
#not sure if this is correct - set predict < 0 to 0, predict > 0 to 1
test_predict[test_predict <= 0] <- 0
test_predict[test_predict > 0] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
df[df$buy == 1]
df[df$buy == 1,]
contrasts(df$consistencycategory)
test_predict <- predict(fit_glm, newdata = df_test, type = 'response')
table(test_predict)
table(round(test_predict,2))
table(df_test$buy, round(test_predict,2), dnn = c('true', 'predicted'))
table(df_test$buy, round(test_predict, 1), dnn = c('true', 'predicted'))
test_predict[test_predict < .2] <- 0
test_predict[test_predict >= .2] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict[test_predict < .3] <- 0
test_predict[test_predict >= .3] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict[test_predict < .1] <- 0
test_predict[test_predict >= .1] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict <- predict(fit_glm, newdata = df_test, type = 'response')
table(df_test$buy, round(test_predict, 1), dnn = c('true', 'predicted'))
test_predict[test_predict < .1] <- 0
test_predict[test_predict >= .1] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nActual targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict <- predict(fit_glm, newdata = df_test, type = 'response')
table(df_test$buy, round(test_predict, 1), dnn = c('true', 'predicted'))
test_predict[test_predict < .1] <- 0
test_predict[test_predict >= .1] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nTrue targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
fit2_glm <- glm(buy ~ datead6 + datelp6 + lpuryear + slshist + ordtyr + falord + sprord + recentseason + years_since_purchase + consistencycategory,
family = binomial(link = 'logit'),
data = df_train)
summary(fit2_glm)
test_predict <- predict(fit2_glm, newdata = df_test)
table(df_test$buy, round(test_predict, 1), dnn = c('true', 'predicted'))
test_predict[test_predict < .1] <- 0
test_predict[test_predict >= .1] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nTrue targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
test_predict <- predict(fit2_glm, newdata = df_test, type = 'response'))
test_predict <- predict(fit2_glm, newdata = df_test, type = 'response')
table(df_test$buy, round(test_predict, 1), dnn = c('true', 'predicted'))
test_predict[test_predict < .1] <- 0
test_predict[test_predict >= .1] <- 1
table(df_test$buy, test_predict, dnn = c('true', 'predicted'))
cat('CCR:', sum(diag(tab))/sum(tab))
cat('\nTrue targdol of predicted buyers', sum(df_test$targdol[test_predict == 1]))
knitr::opts_chunk$set(echo = TRUE)
#names(df)
par(mfrow = c(2, 2))
boxplot(df$targdol, outline = TRUE)
plot(df$datead6, df$targdol)
plot(df$datelp6, df$targdol)
plot(df$lpuryear, df$targdol)
par(mfrow = c(2, 3))
plot(df$slstyr, df$targdol)
plot(df$slslyr, df$targdol)
plot(df$sls2ago, df$targdol)
plot(df$sls3ago, df$targdol)
plot(df$slshist, df$targdol)
par(mfrow = c(2, 3))
plot(df$ordtyr, df$targdol)
plot(df$ordlyr, df$targdol)
plot(df$ord2ago, df$targdol)
plot(df$ord3ago, df$targdol)
plot(df$ordhist, df$targdol)
par(mfrow = c(2, 2))
plot(df$falord, df$targdol)
plot(df$sprord, df$targdol)
plot(df$years_since_purchase, df$targdol)
library(dplyr)
setwd("C:/Users/anish/Dropbox/Q2_Winter18/MSIA_421_DataMining/msia421_hw1_kaggle")
# read orders
dat = read.csv("code/orders.csv")
# read orders
dat = read.csv("data/orders.csv")
# read orders
dat = read.csv("data/orders.csv")
View(dat)
dat$orddt = as.Date(dat$orddate, "%d%b%Y")
head(dat)
dat$orddate = NULL
str(dat)
dim(dat)
# read dependent variable
y = read.csv("booktrain.csv")
# read dependent variable
y = read.csv("data/booktrain.csv")
head(y)
x = dat %>%
group_by(id) %>%
summarise(f=n()) %>%
select(id, f)
head(x)
dim(x)
all = left_join(x, y, by="id")
dim(all)
fit = lm(logtarg ~ log(f+1), all)
summary(fit)
all$yhat = predict(fit, all)
length(yhat)
head(all)
test = is.na(all$logtarg)
write.csv(all[test, c(1,4)], "../test.csv", row.names=F)
write.csv(all[test, c(1,4)], "output/test.csv", row.names=F)
View(all)
View(x)
